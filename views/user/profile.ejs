<%- include("../../views/partials/user/header") %>

<link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.2/css/bootstrap.min.css" rel="stylesheet">
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css" rel="stylesheet">
<style>
    :root {
        --gradient-dark: linear-gradient(135deg, #1a1a1a, #2d2d2d);
        --card-dark-bg: #fff;
    }

    body {
        background-color: #1a1a1a;
        color: #fff;
    }

    .dashboard-menu {
        background-color: var(--card-dark-bg);
        border-radius: 10px;
        padding: 15px;
        box-shadow: 0 4px 10px rgba(255, 255, 255, 0.1);
    }

    .dashboard-menu .nav-link {
        color: #fff;
        padding: 10px 15px;
        border-radius: 5px;
        margin-bottom: 5px;
    }

    .dashboard-menu .nav-link:hover,
    .dashboard-menu .nav-link.active {
        background-color: #4f46e5;
        color: white;
    }

    .gradient-card {
        background: linear-gradient(135deg, #4f46e5, #0ea5e9);
        color: white;
        border: none;
    }

    .dark-card {
        background-color: var(--card-dark-bg);
        border: 1px solid #404040;
    }

    .transaction-item {
        transition: all 0.3s ease;
        background-color: var(--card-dark-bg);
        border: 1px solid #404040;
        margin-bottom: 1rem;
    }

    .transaction-item:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
    }

    .icon-circle {
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 50%;
    }

    .form-control, .input-group-text {
        background-color: #333;
        border-color: #404040;
        color: #fff;
    }

    .form-control:focus {
        background-color: #404040;
        border-color: #4f46e5;
        color: #fff;
        box-shadow: 0 0 0 0.25rem rgba(79, 70, 229, 0.25);
    }

    .text-muted {
        color: #909090 !important;
    }

    .btn-light {
        background-color: rgba(255, 255, 255, 0.1);
        border-color: transparent;
        color: #fff;
    }

    .btn-light:hover {
        background-color: rgba(255, 255, 255, 0.2);
        color: #fff;
    }

    .card-header {
        background-color: rgba(0, 0, 0, 0.2);
        border-bottom: 1px solid #404040;
    }

    .wallet-balance {
        font-size: 2.5rem;
        font-weight: bold;
        margin: 1.5rem 0;
    }

    .wallet-actions {
        display: flex;
        gap: 1rem;
        margin-top: 1rem;
    }

    .transaction-history {
        margin-top: 2rem;
    }

    .theme-toggle {
        position: fixed;
        top: 1rem;
        right: 1rem;
        z-index: 1000;
    }
</style>
  <style>
    .card-green {
      background-color: #ADD8E6;
    }

    .dashboard-menu {
      background-color: #cce3e6;
      border-radius: 10px;
      padding: 15px;
      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    }

    .breadcrumb-wrap {
      background-color: #eee2e9;
      padding: 15px 0;
    }

    .breadcrumb a {
      color: #007bff;
      text-decoration: none;
    }

    .breadcrumb a:hover {
      color: #0056b3;
    }

    .required {
      color: red;
    }
  </style>

  <main class="bg-secondary main py-4">

    <br><br><br><br><br><br>
    <section class="bg-secondary py-5">
      <div class="container ">
        <div class="row">
          <div class="col-lg-3">
            <div class="dashboard-menu">
              <ul class="nav flex-column" role="tablist">
                <li class="nav-item">
                  <a class="nav-link active" id="dashboard-tab" data-bs-toggle="tab" href="#dashboard" role="tab">
                    <i class="bi bi-gear-fill me-2"></i>Dashboard
                  </a>
                </li>
                <li class="nav-item">
                  <a class="nav-link" id="address-tab" data-bs-toggle="tab" href="#address" role="tab">
                    <i class="bi bi-geo-alt-fill me-2"></i>My Address
                  </a>
                </li>
                <li class="nav-item">
                  <a class="nav-link" id="orders-tab" data-bs-toggle="tab" href="#orders" role="tab">
                    <i class="bi bi-bag-fill me-2"></i>Orders
                  </a>
                </li>
                <li class="nav-item">
                  <a class="nav-link" id="wallet-status-tab" data-bs-toggle="tab" href="#wallet-status" role="tab">
                    <i class="bi bi-wallet-fill me-2"></i>Wallet Status
                  </a>
                </li>
                <li class="nav-item">
                  <a class="nav-link" href="/logoutUser">
                    <i class="bi bi-box-arrow-right me-2"></i>Logout
                  </a>
                </li>
              </ul>
            </div>
          </div>

          <div class="col-lg-9">
            <div class="tab-content">
              <div class="tab-pane fade show active" id="dashboard" role="tabpanel">
                <div class="card card-green">
                  <div class="card-header text-center">
                    <h5 class="mb-0">User Profile</h5>
                  </div>
                  <div class="card-body text-center">
                    <p><strong>Name:</strong>
                      <%= userData.name %>
                    </p>
                    <p><strong>Phone:</strong>
                      <% if (userData.phone) { %>
                        <%= userData.phone %>
                      <% } else { %>
                       
                         Null                       
                      <% } %>
                    </p>
                    <p><strong>Email:</strong>
                      <%= userData.email %>
                    </p>
                    <a href="/change-email" class="btn btn-sm btn-primary me-2">Edit Profile</a>
                    <a href="/change-password" class="btn btn-sm btn-secondary">Change Password</a>
                  </div>
                </div>
              </div>

              <div class="tab-pane fade" id="address" role="tabpanel">
                <div class="row">
                  <% if (userAddress) { %>
                    <% userAddress.address.forEach((address)=> { %>



                      <div class="col-lg-6">
                        <div class="card mb-3">
                          <div class="card-header">
                            <h5 class="mb-0">
                              <%= address.addressType %>
                            </h5>
                          </div>
                          <div class="card-body">
                            <address>
                              <strong>Name:</strong>
                              <%= address.name %> <br>
                                <strong>City:</strong>
                                <%= address.city %> <br>
                                  <strong>LandMark:</strong>
                                  <%= address.landMark%> <br>
                                    <strong>State:</strong>
                                    <%= address.state %> <br>

                            </address>
                            <p><strong>Pincode:</strong>
                              <%= address.pincode %>
                            </p>
                            <p><strong>Phone:</strong>
                              <%= address.phone %>
                            </p>
                            <p><strong>altPhone:</strong>
                              <%= address.altPhone %>
                            </p>
                            <div class="d-flex justify-content-between">
                              <a href="editAddress?id=<%= address._id %>" class="btn btn-link">Edit</a>
                              <a href="deleteAddress?id=<%= address._id %>" class="btn btn-link"
                                onclick="return confirm('Are you sure, to delete this address')">Delete</a>
                            </div>
                          </div>
                        </div>
                      </div>
                      <% }) %>
                        <% }else{ %>
                          <div class="col-lg-6">
                            <div class="card mb-3">
                              <div class="card-header">
                                <h5 class="mb-0">No Address</h5>
                              </div>
                              <div class="card-body">No address</div>
                            </div>
                          </div>
                          <% } %>
                </div>
                <a href="/addAddress" class="btn btn-primary mt-3">Add address</a>
              </div>

              <div class="tab-pane fade" id="orders" role="tabpanel">
                <div class="card">
                  <div class="card-header">
                    <h5 class="mb-0">Your Orders </h5>
                  </div>
                  <div class="card-body">
                    <table class="table">
                      <% if (orders.length>0) { %>

                        <% const statusClasses = { 
    pending: 'bg-warning', 
    Processing: 'bg-info', 
    Shipped: 'bg-secondary', 
    Delivered: 'bg-success', 
    Cancelled: 'bg-danger' 
}; %>

<% orders.forEach(order => { %>
  <!-- Order Card -->
  <div class="card order-card">
    <div class="card-header order-header position-relative">
      <span class="order-id">OrderId #<a href="/orderDetails?id=<%= order.orderId %>">
        <%= order.orderId %>
    </a></span>
      
      <span class="order-status bg-warning badge <%= statusClasses[order.status.toLowerCase()] %> position-absolute top-0 end-0 m-2">
        <%= order.status %>
      </span>
      
      <% 
        let date = new Date(order.createdOn);

        // Add 7 days
        date.setDate(date.getDate() + 7);

        // Format to dd/mm/yyyy
        let day = String(date.getDate()).padStart(2, '0');
        let month = String(date.getMonth() + 1).padStart(2, '0'); // Months are 0-indexed
        let year = date.getFullYear();

        let formattedDate = ` ${day}/${month}/${year}`;
      %>
      <span class="delivery-date">| Delivery Date:<%= formattedDate %> | Payment Method: <span class="text-success"><%= order.paymentMethod %> </span> </span>
    </div>
    <div class="card-body">
      <div class="row">
        <div class="col-md-7">
          <h5>Product List</h5>
          <% 
  order.orderedItems.forEach(item => { 
    const productMatch = product.find(p => p.id.toString() === item.product.toString()); 
    const ProductName = productMatch ? productMatch.productName : "Product details not available"; 
%>
    <div class="order-details">
      <div class="d-flex justify-content-between">
        <span><%= ProductName %></span>
        <span>Quantity: <%= item.quantity %></span>
        <span>Price: ₹<%= item.price %></span>
      </div>
    </div>
<% 
  }); 
%>

        </div>
        <div class="col-md-5">
          <h5 class="order-price">Total: ₹<%= order.totalPrice %></h5>
          <div class="order-actions">
            <% if (order.status === 'Delivered') { %>
              <button class="btn btn-warning bg-danger" onclick="returnOrder('<%= order._id %>')">Return Order</button>
            <% } else if (order.status === 'Cancelled') { %>
              <button class="btn btn-secondary" disabled>Cancelled</button>
            <% } else { %>
              <button class="btn btn-primary">Track Order</button>
              <% if (order.status === 'pending') { %>
                <button class="btn btn-secondary" onclick="confirmOrder('<%= order.orderId %>','<%= order.totalPrice %>')">Cancel Order</button>
              <% } else if (order.status === 'Processing') { %>
                <button class="btn btn-secondary">Reorder</button>
              <% } %>
            <% } %>
          </div>
        </div>
      </div>
    </div>
  </div>
  <br>
<% }); %>





                  <% } else { %>
                    <center>
                      <h2>Orders Not Found</h2>
                    </center>
                    <% } %>
                      </table>
                      </div>
                      </div>
                      </div>

                      <div class="tab-pane fade" id="wallet-status" role="tabpanel">
                        <div class="col-lg-9">
    <div class="tab-content">
        <!-- Wallet Status Tab -->
        <div class="tab-pane fade show active" id="wallet-status" role="tabpanel">
    <!-- Balance Card -->
    <div class="card gradient-card mb-4">
        <div class="card-body p-4">
            <h4 class="mb-3">My Wallet</h4>
            <% if (userWallet && userWallet.balance >= 0) { %>
                <div class="wallet-balance fs-2">₹ <%= userWallet.balance.toFixed(2) %></div>
            <% } else { %>
                <div class="wallet-balance text-muted">No Wallet Balance Available</div>
            <% } %>
            <div class="row g-2 mt-3">
                <div class="col-6">
                    <button class="btn btn-light w-100">
                        <i class="bi bi-download me-2"></i>Receive
                    </button>
                </div>
                <!-- Add Money Button -->
                <div class="col-6">
                    <button class="btn btn-primary w-100" data-bs-toggle="modal" data-bs-target="#addMoneyModal">
                        <i class="bi bi-plus me-2"></i>Add Money
                    </button>
                </div>
            </div>
        </div>
    </div>  

    <!-- Transaction History -->
    <div class="card dark-card">
        <div class="card-header">
            <h5 class="mb-0">Recent Transactions</h5>
        </div>
        <div class="card-body">
            <% if (transactions && transactions.length > 0) { %>
                <% transactions.forEach(transaction => { %>
                    <div class="transaction-item mb-3">
                        <div class="d-flex align-items-center">
                            <!-- Transaction Icon -->
                            <div class="icon-circle <%= transaction.transactionType === 'credit' ? 'bg-success bg-opacity-10' : 'bg-danger bg-opacity-10' %> me-3">
                                <i class="bi <%= transaction.transactionType === 'credit' ? 'bi-arrow-down-left text-success' : 'bi-arrow-up-right text-danger' %>"></i>
                            </div>
                            <!-- Transaction Details -->
                            <div class="flex-grow-1">
                                <h6 class="mb-0"><%= transaction.description || 'Transaction' %></h6>
                                <small class="text-muted"><%= new Date(transaction.date).toLocaleDateString() %></small>
                            </div>
                            <!-- Transaction Amount -->
                            <div class="text-end">
                                <div class="<%= transaction.transactionType === 'credit' ? 'text-success' : 'text-danger' %>">
                                    <%= transaction.transactionType === 'credit' ? '+' : '-' %>₹ <%= transaction.amount.toFixed(2) %>
                                </div>
                                <small class="text-muted">Completed</small>
                            </div>
                        </div>
                    </div>
                <% }) %>
            <% } else { %>
                <p class="text-muted">No transactions available.</p>
            <% } %>

            <!-- Pagination Controls -->
            <nav aria-label="Transaction pagination">
                <ul class="pagination justify-content-center mt-4">
                    <% if (currentPage > 1) { %>
                        <li class="page-item">
                            <a class="page-link" href="?page=<%= currentPage - 1 %>">Previous</a>
                        </li>
                    <% } %>
                    <% for (let i = 1; i <= totalPages; i++) { %>
                        <li class="page-item <%= i === currentPage ? 'active' : '' %>">
                            <a class="page-link" href="?page=<%= i %>"><%= i %></a>
                        </li>
                    <% } %>
                    <% if (currentPage < totalPages) { %>
                        <li class="page-item">
                            <a class="page-link" href="?page=<%= currentPage + 1 %>">Next</a>
                        </li>
                    <% } %>
                </ul>
            </nav>
        </div>
    </div>
</div>

<!-- Modal to Add Money -->
<div class="modal fade" id="addMoneyModal" tabindex="-1" aria-labelledby="addMoneyModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addMoneyModalLabel">Add Money</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <label for="amount">Enter Amount:</label>
                <input style="width: 100%;" type="number" class="form-control" id="amount" name="amount" required min="1" step="0.01" placeholder="Enter amount">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" onclick="addMoney()">Add Money</button>
            </div>
        </div>
    </div>
</div>

    </div>
</div>

<!-- Modal for Add Money -->
<div class="modal fade" id="addMoneyModal" tabindex="-1" aria-labelledby="addMoneyModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addMoneyModalLabel">Add Money to Wallet</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form action="" method="">
                    <div class="mb-3">
                        <label for="amount" class="form-label">Amount</label>
                        <div class="input-group bg-white">
                            <span class="input-group-text">₹</span>
                            <input type="number" class="form-control shadow-sm border-primary" id="amount" name="amount" required min="1" step="0.01" placeholder="Enter amount">

<!-- Custom CSS -->
<style>
    #amount::placeholder {
        color: white !important;
    }
</style>
                        </div>
                        <div class="form-text">Enter the amount you want to add to your wallet.</div>
                    </div>
                    <button type="submit" onclick="addMoney()" class="btn btn-primary w-100 mt-3">Add Money</button>
                </form>
            </div>
        </div>
    </div>
</div>

</div>

                      </div>

                      <div class="tab-pane fade" id="referrals" role="tabpanel">
                        <div class="card">
                          <div class="card-header">
                            <h5 class="mb-0">Referrals</h5>
                          </div>
                          <div class="card-body">
                            <p>Share this link to earn rewards:</p>
                            <a href="#" class="text-primary">Referral Link</a>
                            <p>Earned: ₹0</p>
                          </div>
                        </div>
                      </div>
                      </div>
                      </div>
                      </div>
                      </div>
    </section>
  </main>




  
<script>
  
  
  function addMoney() {
    // Get the amount entered by the user
    const amount = parseFloat(document.getElementById('amount').value);
    
    // Get the amount input field
    const amountField = document.getElementById('amount');
    
    // Check if the amount is valid (between 200 and 5000)
    if (amount >= 200 && amount <= 5000) {
        // Show an alert to confirm that the money has been added
        // alert('Amount added: ₹' + amount);
        
        // Optionally, update the wallet balance here (if needed)
        // Example: updateWalletBalance(amount);
        
        // Display the added amount in the field
        amountField.value = amount;
        
        // Clear any previous error messages
        amountField.classList.remove('is-invalid');
        const errorMessage = amountField.nextElementSibling;
        if (errorMessage) {
            errorMessage.remove();
        }


        $.ajax({
          type: "POST",
          url: "/addMoney",  // The request type is POST
          data: {amount: amount},
          success: function(data) {
            console.log(data);
            Swal.fire({
              position: "top-end",
              icon: "success",
              title: "Amount successfully added",
              showConfirmButton: false,
              timer: 1500
            });
            location.reload()
          },
          error: function( error) {
              console.log(error);
              Swal.fire({
                position: "top-end",
                icon: "error",
                title: "Error in adding amount",
                showConfirmButton: false,
                timer: 1500
              });
          }
              
          
        })


        // Close the modal after adding money
        const modal = bootstrap.Modal.getInstance(document.getElementById('addMoneyModal'));
        modal.hide();
    } else {
        // Show an error message if the amount is invalid (out of range)
        amountField.classList.add('is-invalid'); // Add invalid class to input field
        
        // Display custom error message
        let errorMessage = amountField.nextElementSibling;
        if (!errorMessage) {
            errorMessage = document.createElement('div');
            errorMessage.classList.add('invalid-feedback');
            amountField.parentNode.appendChild(errorMessage);
        }
        errorMessage.textContent = 'Please enter a valid amount between ₹200 and ₹5000.';
    }
}


  
  </script>
  
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>










<script>

  function placeOrder(orderId,razorpay_order_id){
                $.ajax({
                            url: '/updateData',
                            method: 'POST',
                            contentType: 'application/json',
                            data: JSON.stringify({
                                orderId:orderId,
                                razorpay_order_id:razorpay_order_id

                            }),
                            success: (response) => {
                                console.log('Server response:', response);

                                if (response.success) {
                                    Swal.fire({
                                        position: "top-end",
                                        icon: "success",
                                        title: "Order Has Been Placed Successfully",
                                        showConfirmButton: false,
                                        timer: 1500,
                                    }).then(() => {
                                        // Redirect to home page after success message
                                        window.location.href = `/shop`;
                                    });
                                    
                                } else {
                                    Swal.fire({
                                        icon: "error",
                                        title: "Oops...",
                                        text: response.message || "Error in placing order.",
                                    });
                                }
                            },
                            error: (error) => {
                                console.error('AJAX error:', error.responseText || error.statusText);
                                Swal.fire({
                                    icon: "error",
                                    title: "Oops...",
                                    text: "Something went wrong!",
                                });
                            },
                        });
            }




async function confirmOrder(orderId, totalPrice) {
    console.log('Order confirmation initiated...', orderId);
    
    const response = await fetch('/create-order', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ amount: totalPrice * 100 }), // Amount in paise (₹1 = 100 paise)
    });

    const order = await response.json();

    const options = {
        key: 'rzp_test_D64ckPQSXSWgra', // Replace with your Razorpay API Key
        amount: order.amount,
        currency: order.currency,
        name: 'DiyElectro',
        description: 'Payment session',
        order_id: order.id, // Razorpay Order ID
        handler: function (response) {
            console.log('Payment success:', response);

            // Send successful response to server for verification
            fetch('/verify-payment', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(response),
            })
            .then(res => res.json())
            .then(data => {
                if (data.success) {
                    placeOrder(orderId, response.razorpay_order_id);
                } else {
                    Swal.fire({
                        icon: "error",
                        title: "Oops...",
                        text: "Payment verification failed!",
                    });
                }
            })
            .catch(error => {
                console.error("Error verifying payment:", error);
                Swal.fire({
                    icon: "error",
                    title: "Oops...",
                    text: "Something went wrong in verification!",
                });
            });
        },
        prefill: {
            name: '<%= userData.name %>',
            email: '<%= userData.email %>',
            contact: '<%= userData.phone %>',
        },
        theme: {
            color: '#3399cc',
        },
    };

    const rzp = new Razorpay(options);

    // Handling payment failure
    rzp.on('payment.failed', function (response) {
        console.error("Payment Failed:", response);

        Swal.fire({
            icon: "error",
            title: "Payment Failed",
            text: `Reason: ${response.error.description || "Unknown error"} \nError Code: ${response.error.code}`,
        });

        // Log the failure to the server for record-keeping
        fetch('/log-payment-failure', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                error_code: response.error.code,
                error_description: response.error.description,
                order_id: response.error.metadata.order_id,
                payment_id: response.error.metadata.payment_id,
            }),
        }).then(() => {
            console.log("Payment failure logged successfully on server.");
            
        }).catch(err => {
            console.error("Error logging payment failure:", err);
        });
    });

    rzp.open();
}


                
  
  
  
  
</script>


<script src="https://checkout.razorpay.com/v1/checkout.js"></script>





















  <script>
    function cancellReturnOrder(orderId) {
      console.log('orderid', orderId)
      Swal.fire({
        title: "Are you sure?",
        text: "Do you want to cancel return request the order",
        icon: "warning",
        showCancelButton: true,
        confirmButtonColor: "#3085d6",
        cancelButtonColor: "#d33",
        confirmButtonText: "Yes, return it!"
      }).then((result) => {
        if (result.isConfirmed) {
          $.ajax({
            url: '/cancellReturnOrder',
            method: 'POST',
            contentType: 'application/json',
            data: JSON.stringify({orderId}),
            success: (response) => {
              if (response.status === 'success') {
                Swal.fire({

                  title: "Done !",
                  text: "Order return request is cancelled!",
                  icon: "success"
                });
                location.reload()
              }
              else {
                Swal.fire({
                  title: 'error',
                  text: 'Error in return order',
                  icon: 'error',
                  timer: 2000,
                });
                location.reload()
              }
            },
          })
          location.reload()
        }
      });

    }
  </script>


  <script>
    function returnOrder(orderId) {
      console.log('orderid', orderId)
      Swal.fire({
        title: "Are you sure?",
        text: "Do you want to return the order",
        icon: "warning",
        showCancelButton: true,
        confirmButtonColor: "#3085d6",
        cancelButtonColor: "#d33",
        confirmButtonText: "Yes, return it!"
      }).then((result) => {
        if (result.isConfirmed) {
          $.ajax({
            url: '/returnOrder',
            method: 'POST',
            contentType: 'application/json',
            data: JSON.stringify({orderId}),
            success: (response) => {
              if (response.status === 'success') {
                Swal.fire({

                  title: "Done !",
                  text: "Order return request is sented!",
                  icon: "success"
                });
                location.reload()
              }
              else {
                Swal.fire({
                  title: 'error',
                  text: 'Error in return order',
                  icon: 'error',
                  timer: 2000,
                });
                location.reload()
              }
            },
          })
          location.reload()
        }
      });

    }
  </script>

  <script>
    function cancelOrder(orderId) {
      console.log('orderid', orderId)
      Swal.fire({
        title: "Are you sure?",
        text: "Do you want to cancel the order",
        icon: "warning",
        showCancelButton: true,
        confirmButtonColor: "#3085d6",
        cancelButtonColor: "#d33",
        confirmButtonText: "Yes, delete it!"
      }).then((result) => {
        if (result.isConfirmed) {
          $.ajax({
            url: '/cancelOrder',
            method: 'POST',
            contentType: 'application/json',
            data: JSON.stringify({orderId}),
            success: (response) => {
              if (response.status === 'success') {
                Swal.fire({

                  title: "Done !",
                  text: "Order Cancelation request is sented!",
                  icon: "success"
                });
                location.reload()
              }
              else {
                Swal.fire({
                  title: 'error',
                  text: 'Error in cancel order',
                  icon: 'error',
                  timer: 2000,
                });
                location.reload()
              }
            },
          })
          location.reload()
        }
      });

    }
  </script>
  <%- include("../../views/partials/user/footer") %>