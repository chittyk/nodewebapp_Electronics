

<%- include("../../views/partials/admin/header") %>

  <head>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@10/dist/sweetalert2.min.css" />
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" />
    <style>
      /* Add custom styling for pagination */
      .pagination-container {
        margin-top: 20px;
      }

      .pagination {
        border-radius: 50px;
        /* Rounded edges for pagination */
      }

      .page-item .page-link {
        border-radius: 50px;
        /* Rounded links */
        padding: 10px 20px;
        font-size: 16px;
        background-color: #f8f9fa;
        border: 1px solid #ddd;
      }

      .page-item.active .page-link {
        background-color: #007bff;
        color: white;
        border-color: #007bff;
      }

      .page-item:hover .page-link {
        background-color: #e9ecef;
        border-color: #ddd;
      }

      .page-link {
        text-decoration: none;
      }

      .page-item:first-child .page-link {
        margin-left: 0;
        /* Remove left margin for first item */
      }

      .page-item:last-child .page-link {
        margin-right: 0;
        /* Remove right margin for last item */
      }


      /* Pagination Container Styling */
      .pagination-container {
        text-align: center;
        /* Center align the pagination */
        margin-top: 20px;
      }

      /* Style for pagination links */
      .page-link {
        display: inline-block;
        padding: 10px 15px;
        font-size: 16px;
        color: #007bff;
        text-decoration: none;
        border: 1px solid #ddd;
        border-radius: 5px;
        margin: 0 5px;
        background-color: white;
        transition: background-color 0.3s, border-color 0.3s;
      }

      .page-link:hover {
        background-color: #f1f1f1;
        border-color: #ccc;
      }

      .page-link:focus {
        outline: none;
        box-shadow: none;
      }

      /* Style for the current page */
      .current-page {
        font-weight: bold;
        color: #fff;
        background-color: #007bff;
        border-color: #007bff;
      }

      /* Disabled state for Previous and Next buttons */
      .page-link:disabled {
        color: #6c757d;
        background-color: #f8f9fa;
        border-color: #ddd;
        cursor: not-allowed;
      }

      /* Adjust spacing between the pagination items */
      .pagination-container a,
      .pagination-container span {
        margin: 0 5px;
      }

      /* Responsive styling */
      @media (max-width: 576px) {
        .page-link {
          padding: 8px 12px;
          font-size: 14px;
        }
      }





      /* Enhancing the Search Button and Input */
      .search-input-group {
        max-width: 700px;
        margin: 0 auto;
      }

      .search-input {
        height: 45px;
        border-top-left-radius: 25px;
        border-bottom-left-radius: 25px;
        padding-left: 20px;
      }

      .btn-custom-search {
        background: linear-gradient(45deg, #6a11cb, #2575fc);
        color: white;
        border-top-right-radius: 25px;
        border-bottom-right-radius: 25px;
        padding: 10px 25px;
        font-weight: bold;
        font-size: 1.1em;
        transition: background 0.3s ease;
      }

      .btn-custom-search:hover {
        background: linear-gradient(45deg, #2575fc, #6a11cb);
        color: #fff;
      }
    </style>

    <style>
      .card {
        margin-left: 45px;
        margin-top: 20px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
      }

      .pagination-container {
        display: flex;
        justify-content: center;
        padding: 20px;
      }

      .btn-custom {
        color: white;
      }

      .text-center-buttons {
        display: flex;
        gap: 8px;
        justify-content: center;
        align-items: center;
      }

      .error-message {
        color: red;
        font-size: 0.9em;
      }

      .content-header {
        text-align: center;
        margin-bottom: 30px;
      }

      .form-inline {
        justify-content: center;
      }

      .table th,
      .table td {
        vertical-align: middle;
        text-align: center;
        padding: 12px;
      }

      .input-group .form-control {
        max-width: 500px;
      }

      .form-group label {
        font-weight: 500;
        margin-bottom: 5px;
      }

      .btn {
        font-size: 0.9rem;
        padding: 6px 12px;
      }

      .btn a {
        color: white;
        text-decoration: none;
      }

      .table-responsive {
        margin-top: 20px;
      }
    </style>
  </head>

  <body>
    <section class="content-main container">
      <div class="row">
        <div class="col-12">
          <div class="content-header my-4">
            <h2 class="content-title">Category Management</h2>
          </div>
        </div>

        <!-- Search Form -->
        <header class="text-center mb-4">
          <div class="col-12">
            <form action="/admin/category/" method="get" class="form-inline">
              <div class="input-group search-input-group">
                <input type="text" class="form-control search-input" placeholder="Search categories" name="search" />
                <div class="input-group-append">
                  <button class="btn btn-custom-search" type="submit">Search</button>
                </div>
              </div>
            </form>
          </div>
        </header>

        <!-- Category Form and Table in Row and Col Format -->
        <div style="width: 100%;" class="card">
          <div style="width: 100%;" class="card-body">
            <div class="row">
              <!-- Add Category Form -->
              <div class="col-md-4 mb-4">
                <form method="post" action="/admin/addCategory" onsubmit="return handleFormSubmit(event)">
                  <div class="form-group">
                    <label for="product_name">Category Name</label>
                    <input type="text" name="name" class="form-control" id="product_name"
                      placeholder="Enter category name" required />
                    <div id="name-error" class="error-message"></div>
                  </div>
                  <div class="form-group">
                    <label for="descriptionId">Description</label>
                    <textarea name="description" class="form-control" id="descriptionId" placeholder="Enter description"
                      required></textarea>
                    <div id="description-error" class="error-message"></div>
                  </div>
                  <button class="btn btn-primary btn-block mt-3" type="submit">Create Category</button>
                </form>
              </div>

              <!-- Category Table -->
              <div class="col-md-8">
                <div class="table-responsive">
                  <table class="table table-hover">
                    <thead>
                      <tr>
                        <th>#</th>
                        <th>Name</th>
                        <th>Description</th>
                        <th>Offer Price</th>
                        <th>Offer</th>
                        <th>Status</th>
                        <th>Actions</th>
                      </tr>
                    </thead>
                    <tbody>
                      <% cat.reverse().forEach((category, index)=> { %>
                        <tr>
                          <td>
                            <%= index + 1 %>
                          </td>
                          <td>
                            <%= category.name %>
                          </td>
                          <td>
                            <%= category.description %>
                          </td>
                          <td>
                            <% if (category.categoryOffer) { %>
                              <%= category.categoryOffer %>
                                <% } else { %>
                                  0%
                                  <% } %>
                          </td>
                          <td class="text-center-buttons">
                            <% if (category.categoryOffer===0) { %>
                              <button class="btn btn-info btn-sm">
                                <a href="#" onclick="addOffer('<%= category._id %>')">Add Offer</a>
                              </button>
                              <% } else { %>
                                <button class="btn btn-info btn-sm">
                                  <a href="#" onclick="removeOffer('<%= category._id %>')">Remove</a>
                                </button>
                                <% } %>
                          </td>
                          <td>
                            <% if (category.isListed) { %>
                              <span class="badge badge-success">Listed</span>

                              <% } else { %>
                                <span class="badge badge-danger">Unlisted</span>
                                <% } %>

                          </td>
                          <td class="text-center-buttons">
                            <% if (category.isListed) { %>
                              <button class="btn btn-danger btn-sm">
                                <a href="/admin/listCategory?id=<%= category._id %>">Unlist</a>

                              </button>
                              <% } else { %>
                                <button class="btn btn-success btn-sm">
                                  <a href="/admin/unlistCategory?id=<%= category._id %>">List</a>
                                </button>
                                <% } %>



                                  <button class="btn btn-info btn-sm">
                                    <a href="/admin/editCategory?id=<%= category._id %>">Edit</a>
                                  </button>
                          </td>
                        </tr>
                        <% }) %>
                    </tbody>
                  </table>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Pagination -->
        <div class="pagination-container">
          <% if (currentPage> 1) { %>
            <a href="?page=<%= currentPage - 1 %>" class="page-link">&laquo; Previous</a>
            <% } %>

              <% for (let i=1; i <=totalPages; i++) { %>
                <% if (i===currentPage) { %>
                  <span class="page-link current-page">
                    <%= i %>
                  </span>
                  <% } else { %>
                    <a href="?page=<%= i %>" class="page-link">
                      <%= i %>
                    </a>
                    <% } %>
                      <% } %>

                        <% if (currentPage < totalPages) { %>
                          <a href="?page=<%= currentPage + 1 %>" class="page-link">Next &raquo;</a>
                          <% } %>
        </div>



      </div>
    </section>


    <script>
      //script for removeCategory and addcategy

      async function addOffer(categoryId) {
        const { value: amount } = await Swal.fire({
          title: "Offer in percentage",
          input: "number",
          inputLabel: "Percentage",
          inputPlaceholder: "%",
        })
        if (amount) {
          try {
            const response = await fetch('/admin/addCategoryOffer', {
              method: 'POST',
              headers: {
                'content-type': "application/json",
              },
              body: JSON.stringify({
                percentage: amount,
                categoryId: categoryId,
              })
            })

            const data = await response.json()
            if (response.ok && data.status === true) {
              Swal.fire(
                'Offer added',
                "The offer has been added ",
                'success'
              ).then(() => {
                location.reload()
              })
            } else {
              Swal.fire("Failed", data.message || "Adding offer faild", "error")
            }


          } catch (error) {
            Swal.fire(
              'Error',
              'An error in adding the offer',
              'error'
            );
            console.error('error in adding offer ', error)
          }
        }
      }

      async function removeOffer(categoryId) {
        try {
          const response = await fetch('/admin/removeCategoryOffer', {
            method: "POST",
            headers: {
              "content-type": "application/json"
            },
            body: JSON.stringify({
              categoryId: categoryId,

            })
          })
          const data = await response.json()
          if (response.ok && data.status === true) {
            swal.fire(
              "Offer Removed",
              "The offer has been removed",
              "success"
            ).then(() => {
              location.reload()
            })
          } else {
            Swal.fire("Failed", data.message || "Removing offer failed", "error")
          }
        } catch (error) {
          Swal.fire(
            "Error",
            "An error occured while removing the offer",
            'error'
          )
          console.error("Error removing offer", error)
        }
      }

    </script>
    <!-- JavaScript -->
    <script>
      function handleFormSubmit(event) {
        event.preventDefault();
        if (!validationForm()) {
          return;
        }

        const name = document.getElementsByName("name")[0].value;
        const description = document.getElementById('descriptionId').value;

        fetch('/admin/addCategory', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ name, description })
        })
          .then(response => {
            if (!response.ok) {
              return response.json().then(err => {
                throw new Error(err.error);
              });
            }
            return response.json();
          })
          .then(data => {
            location.reload();
          })
          .catch(error => {
            if (error.message === "Category already exists") {
              Swal.fire({
                icon: 'error',
                title: "Oops",
                text: 'Category already exists'
              });
            } else {
              Swal.fire({
                icon: 'error',
                title: 'Oops',
                text: 'An error occurred while adding new category'
              });
            }
          });
      }

      function validationForm() {
        clearErrorMessage();
        const name = document.getElementsByName('name')[0].value.trim();
        const description = document.getElementById('descriptionId').value.trim();
        let isValid = true;

        if (name === "") {
          displayErrorMessage("name-error", "Please enter a name");
          isValid = false;
        } else if (!/^[a-zA-Z\s]+$/.test(name)) {
          displayErrorMessage("name-error", "Name should only contain alphabets");
          isValid = false;
        }

        if (description === "") {
          displayErrorMessage("description-error", "Enter the description");
          isValid = false;
        }

        return isValid;
      }

      function displayErrorMessage(elementId, message) {
        const errorElement = document.getElementById(elementId);
        errorElement.innerText = message;
        errorElement.style.display = "block";
      }

      function clearErrorMessage() {
        const errorElements = document.querySelectorAll('.error-message');
        errorElements.forEach(element => {
          element.innerText = "";
          element.style.display = 'none';
        });
      }
    </script>
    <script>
      

    </script>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>
  </body>